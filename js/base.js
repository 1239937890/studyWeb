// 从浏览器中输入url地址到请求返回发生了什么？
// 1， 从输入的url中解析出协议， 主机， 端口， 路径， 并构造一个http请求， 强缓存， 协商缓存；
// 2， DNS域名解析；
// 3， TCP连接；(客户端和服务端要进行可靠传输， 那么就需要确认双方的接收和发送能力，
//  第一次握手可以确认客服端的发送能力， 
//  第二次握手， 确认了服务端的发送能力和接收能力， 
//  所以第三次握手才可以确认客户端的接收能力。 不然容易出现丢包的现象。)
// 4， http请求；
// 5， 服务端处理请求并返回Http报文；
// 6， 浏览器渲染页面


// 作用域分为全局作用域函数作用域
// 全局作用域在window下， 函数作用域在函数内部, 当查找一个值在函数作用域内没有找到就会向上查找, 这种层级寻找形成链式， 就是作用域链。-- >


// 原型和原型链的概念
// 每个对象都会在内部初始化一个属性， 就是prototype（ 原型）;
// 当我们访问一个对象的属性， 如果这个对象的内部没有这个属性，
// 就会去它的原型prototype上查找， 这个prototype又会有自己的prototype， 就这样一直寻找下去。


// 浏览器的内核是指支持浏览器运行的最核心的程序，分为两个部分的，一是渲染引擎，另一个是JS引擎。
// 渲染引擎在不同的浏览器中也不是都相同的。目前市面上常见的浏览器内核可以分为这四种：
// Trident（IE）、Gecko（火狐）、Blink（Chrome、Opera）、Webkit（Safari）。
// 这里面大家最耳熟能详的可能就是 Webkit 内核了，Webkit 内核是当下浏览器世界真正的霸主。


//闭包 是指有权访问另一个函数作用域中的变量的函数
//闭包的作用：
// 1，能够访问函数定义时所在的词法作用域（阻止其被回收）
// 2,私有化变量
//3，创建模块
//4，模拟块级作用域


// document.domain + iframe 跨域
// location.hash + iframe 
// window.name + iframe
// JsonP 跨域
// CORS 跨域资源共享
// nginx 代理跨域
// node 代理跨域
// websocket 跨域

//浏览器渲染机制、重绘、重排（回流）
//网页生成过程
//1，HTML被html解析器解析成DOM树;
//2,CSS被css解析器解析成CSSOM树;
//3,结合dom和cssom生成渲染树;
//4,生成布局,将所有得的渲染树所有节点进行平面合成;
//5,将布局绘制在屏幕上

//重绘: 当一个元素的外观发生变化，但没有改变布局，重新把元素外观绘制出来的过程叫重绘；
//重绘优化建议：分离读写操作，样式集中修改，缓存需要修改的dom

//回流: 当dom的变化影响元素的几何信息(dom对象的位置和大小),浏览器需要重新计算元素的几何信息，将其安放在界面中的正确位置，这个过程就是回流；
//触发回流：1，添加或者删除可见的dom元素 2，元素尺寸的改变(边距，填充，边框，宽度和高度)


//bom 浏览器对象模型，可以对浏览器窗口访问和操作；
//dom 定义html的对象和属性，以及访问它们的方法；